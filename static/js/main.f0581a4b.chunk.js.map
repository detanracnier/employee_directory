{"version":3,"sources":["components/filter.js","components/employeeTableColumns.js","components/employee.js","App.js","reportWebVitals.js","index.js"],"names":["Filter","props","onChange","handleOnChange","className","type","maxLength","placeholder","EmployeeTableColumns","keys","onClick","handleBtnClick","map","key","data-col-name","id","Employee","employee","employeeInfo","Object","App","useState","employees","setEmployees","sortCol","sortOrder","sort","setSort","filter","setFilter","useEffect","employee_list","modifiedEmployeesList","name","toLowerCase","includes","a","b","e","event","target","value","btnName","getAttribute","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAQeA,MANf,SAAgBC,GACZ,OACI,uBAAOC,SAAUD,EAAME,eAAgBC,UAAU,GAAGC,KAAK,OAAOC,UAAU,KAAKC,YAAY,mBCYpFC,MAdf,SAA8BP,GAC1B,IAAIQ,EAAOR,EAAMQ,KAEjB,OACI,qBAAKL,UAAU,MAAMM,QAAST,EAAMU,eAApC,SACKF,EAAKG,KAAI,SAAAC,GAAG,OACT,qBAAsBT,UAAU,eAAeU,gBAAeD,EAA9D,SACKA,GADKA,EAAIE,GAAGF,SCQlBG,MAdf,SAAkBf,GACd,IAAIgB,EAAWhB,EAAMiB,aAErB,OACI,qBAAKd,UAAU,mBAAf,SACKe,OAAOV,KAAKQ,GAAUL,KAAI,SAAAC,GAAG,OAC1B,qBAAeT,UAAU,MAAzB,SACKa,EAASJ,IADJA,S,MCiEXO,MAjEf,WAAgB,IAAD,EAEqBC,mBAAS,CAAC,KAF/B,mBAENC,EAFM,KAEKC,EAFL,OAMWF,mBAAS,CAC/BG,QAAS,KACTC,UAAW,IARA,mBAMNC,EANM,KAMAC,EANA,OAWeN,mBAAS,IAXxB,mBAWNO,EAXM,KAWEC,EAXF,KAcbC,qBAAU,WACRP,EAAaQ,KACZ,IAkBH,IAAIC,EAAwB,GAC5B,IACEA,EAAwBV,EAAUM,QAAO,SAAAX,GAAQ,OAAIA,EAASgB,KAAKC,cAAcC,SAASP,MAASF,MAAK,SAACU,EAAGC,GAK1G,OAHuC,kBAApBD,EAAEV,EAAKF,SAAwBY,EAAEV,EAAKF,SAASU,cAAgBE,EAAEV,EAAKF,WAClD,kBAApBa,EAAEX,EAAKF,SAAwBa,EAAEX,EAAKF,SAASU,cAAgBG,EAAEX,EAAKF,UAGhFE,EAAKD,WAEa,EAAlBC,EAAKD,aAGhB,MAAOa,IAKX,OACE,qCACE,cAAC,EAAD,CAAQnC,eApCV,SAAsBoC,GAClBV,EAAUU,EAAMC,OAAOC,UAqCzB,cAAC,EAAD,CAAsBhC,KAAMU,OAAOV,KAAKa,EAAU,IAAKX,eAlCzD,SAAwB4B,GAEtB,IAAMG,EAAUH,EAAMC,OAAOG,aAAa,iBAC1CC,QAAQC,IAAI,eACZlB,EAAQ,CACNH,QAASkB,EACTjB,WAA6B,EAAlBC,EAAKD,eA8BjBO,EAAsBpB,KAAI,SAAAK,GAAQ,OACjC,cAAC,EAAD,CAA4CC,aAAcD,GAA3CA,EAASF,GAAKE,EAASgB,aCvD7Ba,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f0581a4b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Filter(props) {\r\n    return (\r\n        <input onChange={props.handleOnChange} className=\"\" type=\"text\" maxLength=\"40\" placeholder=\"employee name\" />\r\n    );\r\n}\r\n\r\nexport default Filter;","import React from \"react\";\r\n\r\nfunction EmployeeTableColumns(props) {\r\n    let keys = props.keys;\r\n\r\n    return (\r\n        <div className=\"row\" onClick={props.handleBtnClick}>\r\n            {keys.map(key => (\r\n                <div key={key.id+key} className=\"col btn-info\" data-col-name={key}>\r\n                    {key}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmployeeTableColumns;","import React from \"react\";\r\n\r\nfunction Employee(props) {\r\n    let employee = props.employeeInfo;\r\n\r\n    return (\r\n        <div className=\"row employee-row\">\r\n            {Object.keys(employee).map(key => (\r\n                <div key={key} className=\"col\">\r\n                    {employee[key]}\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Employee;","import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport employee_list from \"./employee_list\";\nimport Filter from \"./components/filter\";\nimport EmployeeTableColumns from \"./components/employeeTableColumns\";\nimport Employee from \"./components/employee\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n\n  const [employees, setEmployees] = useState([{\n\n  }]);\n\n  const [sort, setSort] = useState({\n    sortCol: \"id\",\n    sortOrder: 1\n  })\n\n  const [filter, setFilter] = useState(\"\");\n\n  // When the component mounts, a call will be made to get employees.\n  useEffect(() => {\n    setEmployees(employee_list);\n  }, []);\n\n  function filterChange(event) {\n      setFilter(event.target.value);\n  }\n\n  function handleBtnClick(event) {\n    // Get the title of the clicked button\n    const btnName = event.target.getAttribute(\"data-col-name\");\n    console.log(\"col clicked\");\n    setSort({\n      sortCol: btnName,\n      sortOrder: sort.sortOrder * -1\n    })\n  }\n\n  // Filter employees by Name and Sort employees base on sort state\n  // using a try / catch because the employee list might not be populated yet and the filter throws an error if it's undefined\n  let modifiedEmployeesList = [];\n  try {\n    modifiedEmployeesList = employees.filter(employee => employee.name.toLowerCase().includes(filter)).sort((a, b) => {\n      // removing case sensetivity\n      let sortA = typeof a[sort.sortCol] === \"string\" ? a[sort.sortCol].toLowerCase() : a[sort.sortCol];\n      let sortB = typeof b[sort.sortCol] === \"string\" ? b[sort.sortCol].toLowerCase() : b[sort.sortCol];\n\n      if (sortA > sortB) {\n        return sort.sortOrder;\n      } else {\n        return sort.sortOrder * -1;\n      }\n    });\n  } catch (e) {\n    //console.log(e);\n  }\n\n\nreturn (\n  <>\n    <Filter handleOnChange={filterChange} />\n    {/* Create and name columns based off the first employee object */}\n    <EmployeeTableColumns keys={Object.keys(employees[0])} handleBtnClick={handleBtnClick} />\n    {/* pass each employee into the Employee component */}\n    {modifiedEmployeesList.map(employee => (\n      <Employee key={employee.id + employee.name} employeeInfo={employee} />\n    ))}\n  </>\n)\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}